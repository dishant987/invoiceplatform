// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

enum InvoiceStatus {
  PAID
  PENDING
}

model User {
  id            String          @id @default(cuid())
  firstName     String?
  lastName      String?
  address       String?
  gender        Gender?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  invoices      Invoice[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model LineItem {
  id          String @id @default(uuid()) // Unique identifier
  description String
  quantity    Int    @default(1)
  rate        Float  @default(0.00)
  amount      Float  @default(0.00)

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade) // Relation back to Invoice
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  draft         String
  currency      String
  status        InvoiceStatus @default(PENDING)
  fromName      String
  fromEmail     String
  fromAddress   String
  toName        String
  toEmail       String
  toAddress     String
  date          DateTime
  dueDate       DateTime
  notes         String?
  lineItems     LineItem[]
  total         Float  @default(0.00)
  subTotal      Float  @default(0.00)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  User          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
